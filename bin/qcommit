#!/usr/bin/env bash

# qcommit - AI-assisted conventional commit message generator
# Version: 1.2.0
# Usage: qcommit [options]
#
# Options:
#   -h, --help     Show this help message
#   -t, --type     Specify commit type (feat, fix, docs, etc.)
#   -s, --scope    Specify commit scope
#   -m, --message  Specify commit message
#   -d, --dry-run  Show the generated commit message without committing
#   -S, --sign     Sign the commit with GPG (default)
#   -n, --no-sign  Don't sign the commit
#   -v, --verbose  Show detailed information about detection process

set -e

# Default values
DRY_RUN=false
COMMIT_TYPE=""
COMMIT_SCOPE=""
COMMIT_MESSAGE=""
SIGN_COMMIT=true  # Sign commits by default
VERBOSE=false

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      echo "qcommit - AI-assisted conventional commit message generator"
      echo ""
      echo "Usage: qcommit [options]"
      echo ""
      echo "Options:"
      echo "  -h, --help     Show this help message"
      echo "  -t, --type     Specify commit type (feat, fix, docs, etc.)"
      echo "  -s, --scope    Specify commit scope"
      echo "  -m, --message  Specify commit message"
      echo "  -d, --dry-run  Show the generated commit message without committing"
      echo "  -S, --sign     Sign the commit with GPG (default)"
      echo "  -n, --no-sign  Don't sign the commit"
      echo "  -v, --verbose  Show detailed information about detection process"
      exit 0
      ;;
    -t|--type)
      COMMIT_TYPE="$2"
      shift 2
      ;;
    -s|--scope)
      COMMIT_SCOPE="$2"
      shift 2
      ;;
    -m|--message)
      COMMIT_MESSAGE="$2"
      shift 2
      ;;
    -d|--dry-run)
      DRY_RUN=true
      shift
      ;;
    -S|--sign)
      SIGN_COMMIT=true
      shift
      ;;
    -n|--no-sign)
      SIGN_COMMIT=false
      shift
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    *)
      echo -e "${RED}Unknown option: $1${NC}"
      exit 1
      ;;
  esac
done

# Debug function
debug() {
  if [[ "$VERBOSE" == "true" ]]; then
    echo -e "${BLUE}DEBUG:${NC} $1"
  fi
}

# Check if there are staged changes
if [[ -z "$(git diff --cached --name-only)" ]]; then
  echo -e "${RED}Error: No staged changes found. Use 'git add <files>' to stage changes.${NC}"
  exit 1
fi

# Get the list of changed files
CHANGED_FILES=$(git diff --cached --name-only)
debug "Changed files:\n$CHANGED_FILES"

# Count files by directory pattern
FRONTEND_COUNT=0
API_COUNT=0
CI_COUNT=0
DOCS_COUNT=0
DEV_TOOLS_COUNT=0

# Simplified file counting
while IFS= read -r file; do
  if [[ "$file" == frontend/* ]]; then
    ((FRONTEND_COUNT++))
  elif [[ "$file" == api/* ]]; then
    ((API_COUNT++))
  elif [[ "$file" == .github/* ]]; then
    ((CI_COUNT++))
  elif [[ "$file" == docs/* ]]; then
    ((DOCS_COUNT++))
  elif [[ "$file" == bin/* ]] || [[ "$file" == .devtools/* ]]; then
    ((DEV_TOOLS_COUNT++))
  fi
done <<< "$CHANGED_FILES"

# Count file types
TOTAL_COUNT=$(echo "$CHANGED_FILES" | wc -l | tr -d ' ')
MD_COUNT=$(echo "$CHANGED_FILES" | grep -c "\.md$" || echo "0")
TEST_COUNT=$(echo "$CHANGED_FILES" | grep -c "\.test\.|\.spec\." || echo "0")
CONFIG_COUNT=$(echo "$CHANGED_FILES" | grep -c "\.config\.|\.json$|\.yaml$|\.yml$" || echo "0")

debug "File counts:"
debug "Total: $TOTAL_COUNT"
debug "Frontend: $FRONTEND_COUNT"
debug "API: $API_COUNT"
debug "CI: $CI_COUNT"
debug "Docs: $DOCS_COUNT"
debug "DevTools: $DEV_TOOLS_COUNT"
debug "Markdown: $MD_COUNT"
debug "Tests: $TEST_COUNT"
debug "Config: $CONFIG_COUNT"

# Determine the scope based on changed files if not provided
if [[ -z "$COMMIT_SCOPE" ]]; then
  # Check for mixed changes of dev tools and CI
  if [[ $DEV_TOOLS_COUNT -gt 0 && $CI_COUNT -gt 0 && $(($DEV_TOOLS_COUNT + $CI_COUNT)) -ge $(($TOTAL_COUNT / 2)) ]]; then
    COMMIT_SCOPE="workflows"
    debug "Detected mixed dev tools and CI changes, setting scope to 'workflows'"
  # Check dominant category
  elif [[ $FRONTEND_COUNT -gt $(($TOTAL_COUNT / 2)) ]]; then
    COMMIT_SCOPE="frontend"
    debug "Dominant frontend files, setting scope to 'frontend'"
  elif [[ $API_COUNT -gt $(($TOTAL_COUNT / 2)) ]]; then
    COMMIT_SCOPE="api"
    debug "Dominant API files, setting scope to 'api'"
  elif [[ $CI_COUNT -gt $(($TOTAL_COUNT / 2)) ]]; then
    COMMIT_SCOPE="ci"
    debug "Dominant CI files, setting scope to 'ci'"
  elif [[ $DOCS_COUNT -gt $(($TOTAL_COUNT / 2)) ]]; then
    COMMIT_SCOPE="docs"
    debug "Dominant docs files, setting scope to 'docs'"
  elif [[ $DEV_TOOLS_COUNT -gt $(($TOTAL_COUNT / 2)) ]]; then
    COMMIT_SCOPE="devtools"
    debug "Dominant dev tools files, setting scope to 'devtools'"
  fi
  
  # Override for dependency changes
  if echo "$CHANGED_FILES" | grep -q "package.json\|package-lock.json\|yarn.lock\|pnpm-lock.yaml"; then
    # Check if it's only dependency changes
    if [[ $(echo "$CHANGED_FILES" | grep -c "package.json\|package-lock.json\|yarn.lock\|pnpm-lock.yaml") -eq $TOTAL_COUNT ]]; then
      COMMIT_SCOPE="deps"
      debug "Only dependency files changed, setting scope to 'deps'"
    fi
  fi
fi

# Determine the type based on changed files if not provided
if [[ -z "$COMMIT_TYPE" ]]; then
  # Default to chore for mixed dev tooling and CI
  if [[ $DEV_TOOLS_COUNT -gt 0 && $CI_COUNT -gt 0 ]]; then
    COMMIT_TYPE="chore"
    debug "Detected dev tools and CI changes, setting type to 'chore'"
  # Check for documentation changes
  elif [[ $MD_COUNT -eq $TOTAL_COUNT && $TOTAL_COUNT -gt 0 ]]; then
    COMMIT_TYPE="docs"
    debug "All files are markdown, setting type to 'docs'"
  # Check for test changes
  elif [[ $TEST_COUNT -eq $TOTAL_COUNT && $TOTAL_COUNT -gt 0 ]]; then
    COMMIT_TYPE="test"
    debug "All files are tests, setting type to 'test'"
  # Check for CI changes
  elif [[ $CI_COUNT -eq $TOTAL_COUNT && $TOTAL_COUNT -gt 0 ]]; then
    COMMIT_TYPE="ci"
    debug "All files are CI config, setting type to 'ci'"
  # Check for dependency changes
  elif [[ $(echo "$CHANGED_FILES" | grep -c "package.json\|package-lock.json\|yarn.lock\|pnpm-lock.yaml") -eq $TOTAL_COUNT ]]; then
    COMMIT_TYPE="build"
    debug "All files are dependency files, setting type to 'build'"
  # Check for dev tooling changes
  elif [[ $DEV_TOOLS_COUNT -eq $TOTAL_COUNT && $TOTAL_COUNT -gt 0 ]]; then
    COMMIT_TYPE="chore"
    debug "All files are dev tools, setting type to 'chore'"
  # Default based on patterns
  else
    # Default to chore for this type of PR
    COMMIT_TYPE="chore"
    debug "Mixed changes, defaulting to 'chore'"
  fi
  
  # Special case for version bump in package.json
  if echo "$CHANGED_FILES" | grep -q "package.json" && git diff --cached -- package.json | grep -q '"version"'; then
    COMMIT_TYPE="chore"
    COMMIT_SCOPE="release"
    debug "Detected version bump in package.json, setting type to 'chore' and scope to 'release'"
  fi
fi

# Generate a commit message if not provided
if [[ -z "$COMMIT_MESSAGE" ]]; then
  echo "Generating commit message..."

  # Get a summary of the changes
  DIFF_SUMMARY=$(git diff --cached --stat)
  debug "Diff summary:\n$DIFF_SUMMARY"

  # Determine message based on types and patterns
  if [[ $DEV_TOOLS_COUNT -gt 0 && $CI_COUNT -gt 0 ]]; then
    COMMIT_MESSAGE="set up development and CI workflows"
    debug "Detected mixed dev tools and CI changes, setting message to 'set up development and CI workflows'"
  elif echo "$CHANGED_FILES" | grep -q "package.json\|package-lock.json\|yarn.lock\|pnpm-lock.yaml"; then
    COMMIT_MESSAGE="update dependencies"
    debug "Detected dependency files, setting message to 'update dependencies'"
  elif echo "$CHANGED_FILES" | grep -q "\.github/workflows/"; then
    COMMIT_MESSAGE="configure CI pipeline"
    debug "Detected GitHub workflow files, setting message to 'configure CI pipeline'"
  elif [[ "$COMMIT_TYPE" == "docs" ]]; then
    COMMIT_MESSAGE="update documentation"
    debug "Type is 'docs', setting message to 'update documentation'"
  elif [[ "$COMMIT_TYPE" == "chore" ]]; then
    if echo "$CHANGED_FILES" | grep -q "bin/qcommit"; then
      COMMIT_MESSAGE="add commit automation tooling"
      debug "Detected qcommit script, setting message to 'add commit automation tooling'"
    elif echo "$CHANGED_FILES" | grep -q "\.github/"; then
      COMMIT_MESSAGE="configure GitHub settings"
      debug "Detected GitHub configuration, setting message to 'configure GitHub settings'"
    elif echo "$CHANGED_FILES" | grep -q "\.devtools/"; then
      COMMIT_MESSAGE="add developer tooling"
      debug "Detected dev tools, setting message to 'add developer tooling'"
    elif echo "$CHANGED_FILES" | grep -q "\.husky/"; then
      COMMIT_MESSAGE="configure git hooks"
      debug "Detected Husky changes, setting message to 'configure git hooks'"
    else
      COMMIT_MESSAGE="configure project settings"
      debug "No specific pattern for chore, setting message to 'configure project settings'"
    fi
  else
    COMMIT_MESSAGE="update project configuration"
    debug "No specific pattern detected, setting message to 'update project configuration'"
  fi
fi

# Format the commit message according to conventional commits
if [[ -n "$COMMIT_SCOPE" ]]; then
  FORMATTED_COMMIT="$COMMIT_TYPE($COMMIT_SCOPE): $COMMIT_MESSAGE"
else
  FORMATTED_COMMIT="$COMMIT_TYPE: $COMMIT_MESSAGE"
fi

# Show the commit message
echo -e "${GREEN}Generated commit message:${NC}"
echo -e "${YELLOW}$FORMATTED_COMMIT${NC}"

# Allow user to edit the message if needed
read -p "Use this message? (Y/n/e - edit): " -n 1 -r
echo
if [[ $REPLY =~ ^[Nn]$ ]]; then
  # Prompt for a custom message
  echo "Enter custom commit message:"
  read -e CUSTOM_MESSAGE
  if [[ -n "$CUSTOM_MESSAGE" ]]; then
    if [[ -n "$COMMIT_SCOPE" ]]; then
      FORMATTED_COMMIT="$COMMIT_TYPE($COMMIT_SCOPE): $CUSTOM_MESSAGE"
    else
      FORMATTED_COMMIT="$COMMIT_TYPE: $CUSTOM_MESSAGE"
    fi
  else
    echo "No custom message provided. Using the generated message."
  fi
elif [[ $REPLY =~ ^[Ee]$ ]]; then
  # Open editor for more complex edits
  echo "$FORMATTED_COMMIT" > /tmp/qcommit_msg
  ${EDITOR:-vi} /tmp/qcommit_msg
  FORMATTED_COMMIT=$(cat /tmp/qcommit_msg)
  rm /tmp/qcommit_msg
fi

# Commit the changes if not in dry run mode
if [[ "$DRY_RUN" == "false" ]]; then
  # Use GPG signing if enabled
  if [[ "$SIGN_COMMIT" == "true" ]]; then
    git commit -S -m "$FORMATTED_COMMIT"
  else
    git commit -m "$FORMATTED_COMMIT"
  fi
  echo -e "${GREEN}Changes committed successfully!${NC}"
else
  echo -e "${YELLOW}Dry run mode. No changes committed.${NC}"
  echo -e "Would run: git commit -m \"$FORMATTED_COMMIT\""
fi